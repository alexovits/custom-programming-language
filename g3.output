Grammar

    0 $accept: programSegment $end

    1 programSegment: decl ';'
    2               | exp ';'
    3               | ifCond
    4               | forLoop
    5               | whileLoop
    6               | assign ';'
    7               | functionDecl
    8               | programSegment decl ';'
    9               | programSegment exp ';'
   10               | programSegment ifCond
   11               | programSegment forLoop
   12               | programSegment whileLoop
   13               | programSegment assign ';'
   14               | programSegment functionDecl

   15 ifCond: IF '(' cond ')' '{' programSegment '}'

   16 forLoop: FOR '(' exp '=' exp ';' cond ';' VARIABLE PRE_POST_FIX_OP ')' '{' programSegment '}'

   17 whileLoop: WHILE '(' cond ')' '{' programSegment '}'

   18 functionDecl: FUNCTION VARIABLE '(' headerDecl ')' '{' programSegment '}'

   19 headerDecl: VARIABLE ',' headerDecl
   20           | VARIABLE

   21 decl: VAR VARIABLE

   22 cond: exp COND_OP exp
   23     | exp

   24 assign: VARIABLE '=' exp

   25 exp: LOGICAL_EXP
   26    | NUMBER
   27    | VARIABLE
   28    | VARIABLE PRE_POST_FIX_OP
   29    | exp '+' exp
   30    | exp '-' exp
   31    | exp '*' exp
   32    | exp '/' exp
   33    | '(' exp ')'


Terminals, with rules where they appear

$end (0) 0
'(' (40) 15 16 17 18 33
')' (41) 15 16 17 18 33
'*' (42) 31
'+' (43) 29
',' (44) 19
'-' (45) 30
'/' (47) 32
';' (59) 1 2 6 8 9 13 16
'=' (61) 16 24
'{' (123) 15 16 17 18
'}' (125) 15 16 17 18
error (256)
FUNCTION (258) 18
VARIABLE (259) 16 18 19 20 21 24 27 28
NUMBER (260) 26
FOR (261) 16
IF (262) 15
VAR (263) 21
LOGICAL_EXP (264) 25
COND_OP (265) 22
WHILE (266) 17
PRE_POST_FIX_OP (267) 16 28


Nonterminals, with rules where they appear

$accept (24)
    on left: 0
programSegment (25)
    on left: 1 2 3 4 5 6 7 8 9 10 11 12 13 14, on right: 0 8 9 10 11
    12 13 14 15 16 17 18
ifCond (26)
    on left: 15, on right: 3 10
forLoop (27)
    on left: 16, on right: 4 11
whileLoop (28)
    on left: 17, on right: 5 12
functionDecl (29)
    on left: 18, on right: 7 14
headerDecl (30)
    on left: 19 20, on right: 18 19
decl (31)
    on left: 21, on right: 1 8
cond (32)
    on left: 22 23, on right: 15 16 17
assign (33)
    on left: 24, on right: 6 13
exp (34)
    on left: 25 26 27 28 29 30 31 32 33, on right: 2 9 16 22 23 24
    29 30 31 32 33


state 0

    0 $accept: . programSegment $end

    FUNCTION     shift, and go to state 1
    VARIABLE     shift, and go to state 2
    NUMBER       shift, and go to state 3
    FOR          shift, and go to state 4
    IF           shift, and go to state 5
    VAR          shift, and go to state 6
    LOGICAL_EXP  shift, and go to state 7
    WHILE        shift, and go to state 8
    '('          shift, and go to state 9

    programSegment  go to state 10
    ifCond          go to state 11
    forLoop         go to state 12
    whileLoop       go to state 13
    functionDecl    go to state 14
    decl            go to state 15
    assign          go to state 16
    exp             go to state 17


state 1

   18 functionDecl: FUNCTION . VARIABLE '(' headerDecl ')' '{' programSegment '}'

    VARIABLE  shift, and go to state 18


state 2

   24 assign: VARIABLE . '=' exp
   27 exp: VARIABLE .
   28    | VARIABLE . PRE_POST_FIX_OP

    PRE_POST_FIX_OP  shift, and go to state 19
    '='              shift, and go to state 20

    $default  reduce using rule 27 (exp)


state 3

   26 exp: NUMBER .

    $default  reduce using rule 26 (exp)


state 4

   16 forLoop: FOR . '(' exp '=' exp ';' cond ';' VARIABLE PRE_POST_FIX_OP ')' '{' programSegment '}'

    '('  shift, and go to state 21


state 5

   15 ifCond: IF . '(' cond ')' '{' programSegment '}'

    '('  shift, and go to state 22


state 6

   21 decl: VAR . VARIABLE

    VARIABLE  shift, and go to state 23


state 7

   25 exp: LOGICAL_EXP .

    $default  reduce using rule 25 (exp)


state 8

   17 whileLoop: WHILE . '(' cond ')' '{' programSegment '}'

    '('  shift, and go to state 24


state 9

   33 exp: '(' . exp ')'

    VARIABLE     shift, and go to state 25
    NUMBER       shift, and go to state 3
    LOGICAL_EXP  shift, and go to state 7
    '('          shift, and go to state 9

    exp  go to state 26


state 10

    0 $accept: programSegment . $end
    8 programSegment: programSegment . decl ';'
    9               | programSegment . exp ';'
   10               | programSegment . ifCond
   11               | programSegment . forLoop
   12               | programSegment . whileLoop
   13               | programSegment . assign ';'
   14               | programSegment . functionDecl

    $end         shift, and go to state 27
    FUNCTION     shift, and go to state 1
    VARIABLE     shift, and go to state 2
    NUMBER       shift, and go to state 3
    FOR          shift, and go to state 4
    IF           shift, and go to state 5
    VAR          shift, and go to state 6
    LOGICAL_EXP  shift, and go to state 7
    WHILE        shift, and go to state 8
    '('          shift, and go to state 9

    ifCond        go to state 28
    forLoop       go to state 29
    whileLoop     go to state 30
    functionDecl  go to state 31
    decl          go to state 32
    assign        go to state 33
    exp           go to state 34


state 11

    3 programSegment: ifCond .

    $default  reduce using rule 3 (programSegment)


state 12

    4 programSegment: forLoop .

    $default  reduce using rule 4 (programSegment)


state 13

    5 programSegment: whileLoop .

    $default  reduce using rule 5 (programSegment)


state 14

    7 programSegment: functionDecl .

    $default  reduce using rule 7 (programSegment)


state 15

    1 programSegment: decl . ';'

    ';'  shift, and go to state 35


state 16

    6 programSegment: assign . ';'

    ';'  shift, and go to state 36


state 17

    2 programSegment: exp . ';'
   29 exp: exp . '+' exp
   30    | exp . '-' exp
   31    | exp . '*' exp
   32    | exp . '/' exp

    '+'  shift, and go to state 37
    '-'  shift, and go to state 38
    '*'  shift, and go to state 39
    '/'  shift, and go to state 40
    ';'  shift, and go to state 41


state 18

   18 functionDecl: FUNCTION VARIABLE . '(' headerDecl ')' '{' programSegment '}'

    '('  shift, and go to state 42


state 19

   28 exp: VARIABLE PRE_POST_FIX_OP .

    $default  reduce using rule 28 (exp)


state 20

   24 assign: VARIABLE '=' . exp

    VARIABLE     shift, and go to state 25
    NUMBER       shift, and go to state 3
    LOGICAL_EXP  shift, and go to state 7
    '('          shift, and go to state 9

    exp  go to state 43


state 21

   16 forLoop: FOR '(' . exp '=' exp ';' cond ';' VARIABLE PRE_POST_FIX_OP ')' '{' programSegment '}'

    VARIABLE     shift, and go to state 25
    NUMBER       shift, and go to state 3
    LOGICAL_EXP  shift, and go to state 7
    '('          shift, and go to state 9

    exp  go to state 44


state 22

   15 ifCond: IF '(' . cond ')' '{' programSegment '}'

    VARIABLE     shift, and go to state 25
    NUMBER       shift, and go to state 3
    LOGICAL_EXP  shift, and go to state 7
    '('          shift, and go to state 9

    cond  go to state 45
    exp   go to state 46


state 23

   21 decl: VAR VARIABLE .

    $default  reduce using rule 21 (decl)


state 24

   17 whileLoop: WHILE '(' . cond ')' '{' programSegment '}'

    VARIABLE     shift, and go to state 25
    NUMBER       shift, and go to state 3
    LOGICAL_EXP  shift, and go to state 7
    '('          shift, and go to state 9

    cond  go to state 47
    exp   go to state 46


state 25

   27 exp: VARIABLE .
   28    | VARIABLE . PRE_POST_FIX_OP

    PRE_POST_FIX_OP  shift, and go to state 19

    $default  reduce using rule 27 (exp)


state 26

   29 exp: exp . '+' exp
   30    | exp . '-' exp
   31    | exp . '*' exp
   32    | exp . '/' exp
   33    | '(' exp . ')'

    '+'  shift, and go to state 37
    '-'  shift, and go to state 38
    '*'  shift, and go to state 39
    '/'  shift, and go to state 40
    ')'  shift, and go to state 48


state 27

    0 $accept: programSegment $end .

    $default  accept


state 28

   10 programSegment: programSegment ifCond .

    $default  reduce using rule 10 (programSegment)


state 29

   11 programSegment: programSegment forLoop .

    $default  reduce using rule 11 (programSegment)


state 30

   12 programSegment: programSegment whileLoop .

    $default  reduce using rule 12 (programSegment)


state 31

   14 programSegment: programSegment functionDecl .

    $default  reduce using rule 14 (programSegment)


state 32

    8 programSegment: programSegment decl . ';'

    ';'  shift, and go to state 49


state 33

   13 programSegment: programSegment assign . ';'

    ';'  shift, and go to state 50


state 34

    9 programSegment: programSegment exp . ';'
   29 exp: exp . '+' exp
   30    | exp . '-' exp
   31    | exp . '*' exp
   32    | exp . '/' exp

    '+'  shift, and go to state 37
    '-'  shift, and go to state 38
    '*'  shift, and go to state 39
    '/'  shift, and go to state 40
    ';'  shift, and go to state 51


state 35

    1 programSegment: decl ';' .

    $default  reduce using rule 1 (programSegment)


state 36

    6 programSegment: assign ';' .

    $default  reduce using rule 6 (programSegment)


state 37

   29 exp: exp '+' . exp

    VARIABLE     shift, and go to state 25
    NUMBER       shift, and go to state 3
    LOGICAL_EXP  shift, and go to state 7
    '('          shift, and go to state 9

    exp  go to state 52


state 38

   30 exp: exp '-' . exp

    VARIABLE     shift, and go to state 25
    NUMBER       shift, and go to state 3
    LOGICAL_EXP  shift, and go to state 7
    '('          shift, and go to state 9

    exp  go to state 53


state 39

   31 exp: exp '*' . exp

    VARIABLE     shift, and go to state 25
    NUMBER       shift, and go to state 3
    LOGICAL_EXP  shift, and go to state 7
    '('          shift, and go to state 9

    exp  go to state 54


state 40

   32 exp: exp '/' . exp

    VARIABLE     shift, and go to state 25
    NUMBER       shift, and go to state 3
    LOGICAL_EXP  shift, and go to state 7
    '('          shift, and go to state 9

    exp  go to state 55


state 41

    2 programSegment: exp ';' .

    $default  reduce using rule 2 (programSegment)


state 42

   18 functionDecl: FUNCTION VARIABLE '(' . headerDecl ')' '{' programSegment '}'

    VARIABLE  shift, and go to state 56

    headerDecl  go to state 57


state 43

   24 assign: VARIABLE '=' exp .
   29 exp: exp . '+' exp
   30    | exp . '-' exp
   31    | exp . '*' exp
   32    | exp . '/' exp

    '+'  shift, and go to state 37
    '-'  shift, and go to state 38
    '*'  shift, and go to state 39
    '/'  shift, and go to state 40

    $default  reduce using rule 24 (assign)


state 44

   16 forLoop: FOR '(' exp . '=' exp ';' cond ';' VARIABLE PRE_POST_FIX_OP ')' '{' programSegment '}'
   29 exp: exp . '+' exp
   30    | exp . '-' exp
   31    | exp . '*' exp
   32    | exp . '/' exp

    '+'  shift, and go to state 37
    '-'  shift, and go to state 38
    '*'  shift, and go to state 39
    '/'  shift, and go to state 40
    '='  shift, and go to state 58


state 45

   15 ifCond: IF '(' cond . ')' '{' programSegment '}'

    ')'  shift, and go to state 59


state 46

   22 cond: exp . COND_OP exp
   23     | exp .
   29 exp: exp . '+' exp
   30    | exp . '-' exp
   31    | exp . '*' exp
   32    | exp . '/' exp

    COND_OP  shift, and go to state 60
    '+'      shift, and go to state 37
    '-'      shift, and go to state 38
    '*'      shift, and go to state 39
    '/'      shift, and go to state 40

    $default  reduce using rule 23 (cond)


state 47

   17 whileLoop: WHILE '(' cond . ')' '{' programSegment '}'

    ')'  shift, and go to state 61


state 48

   33 exp: '(' exp ')' .

    $default  reduce using rule 33 (exp)


state 49

    8 programSegment: programSegment decl ';' .

    $default  reduce using rule 8 (programSegment)


state 50

   13 programSegment: programSegment assign ';' .

    $default  reduce using rule 13 (programSegment)


state 51

    9 programSegment: programSegment exp ';' .

    $default  reduce using rule 9 (programSegment)


state 52

   29 exp: exp . '+' exp
   29    | exp '+' exp .
   30    | exp . '-' exp
   31    | exp . '*' exp
   32    | exp . '/' exp

    '*'  shift, and go to state 39
    '/'  shift, and go to state 40

    $default  reduce using rule 29 (exp)


state 53

   29 exp: exp . '+' exp
   30    | exp . '-' exp
   30    | exp '-' exp .
   31    | exp . '*' exp
   32    | exp . '/' exp

    '*'  shift, and go to state 39
    '/'  shift, and go to state 40

    $default  reduce using rule 30 (exp)


state 54

   29 exp: exp . '+' exp
   30    | exp . '-' exp
   31    | exp . '*' exp
   31    | exp '*' exp .
   32    | exp . '/' exp

    $default  reduce using rule 31 (exp)


state 55

   29 exp: exp . '+' exp
   30    | exp . '-' exp
   31    | exp . '*' exp
   32    | exp . '/' exp
   32    | exp '/' exp .

    $default  reduce using rule 32 (exp)


state 56

   19 headerDecl: VARIABLE . ',' headerDecl
   20           | VARIABLE .

    ','  shift, and go to state 62

    $default  reduce using rule 20 (headerDecl)


state 57

   18 functionDecl: FUNCTION VARIABLE '(' headerDecl . ')' '{' programSegment '}'

    ')'  shift, and go to state 63


state 58

   16 forLoop: FOR '(' exp '=' . exp ';' cond ';' VARIABLE PRE_POST_FIX_OP ')' '{' programSegment '}'

    VARIABLE     shift, and go to state 25
    NUMBER       shift, and go to state 3
    LOGICAL_EXP  shift, and go to state 7
    '('          shift, and go to state 9

    exp  go to state 64


state 59

   15 ifCond: IF '(' cond ')' . '{' programSegment '}'

    '{'  shift, and go to state 65


state 60

   22 cond: exp COND_OP . exp

    VARIABLE     shift, and go to state 25
    NUMBER       shift, and go to state 3
    LOGICAL_EXP  shift, and go to state 7
    '('          shift, and go to state 9

    exp  go to state 66


state 61

   17 whileLoop: WHILE '(' cond ')' . '{' programSegment '}'

    '{'  shift, and go to state 67


state 62

   19 headerDecl: VARIABLE ',' . headerDecl

    VARIABLE  shift, and go to state 56

    headerDecl  go to state 68


state 63

   18 functionDecl: FUNCTION VARIABLE '(' headerDecl ')' . '{' programSegment '}'

    '{'  shift, and go to state 69


state 64

   16 forLoop: FOR '(' exp '=' exp . ';' cond ';' VARIABLE PRE_POST_FIX_OP ')' '{' programSegment '}'
   29 exp: exp . '+' exp
   30    | exp . '-' exp
   31    | exp . '*' exp
   32    | exp . '/' exp

    '+'  shift, and go to state 37
    '-'  shift, and go to state 38
    '*'  shift, and go to state 39
    '/'  shift, and go to state 40
    ';'  shift, and go to state 70


state 65

   15 ifCond: IF '(' cond ')' '{' . programSegment '}'

    FUNCTION     shift, and go to state 1
    VARIABLE     shift, and go to state 2
    NUMBER       shift, and go to state 3
    FOR          shift, and go to state 4
    IF           shift, and go to state 5
    VAR          shift, and go to state 6
    LOGICAL_EXP  shift, and go to state 7
    WHILE        shift, and go to state 8
    '('          shift, and go to state 9

    programSegment  go to state 71
    ifCond          go to state 11
    forLoop         go to state 12
    whileLoop       go to state 13
    functionDecl    go to state 14
    decl            go to state 15
    assign          go to state 16
    exp             go to state 17


state 66

   22 cond: exp COND_OP exp .
   29 exp: exp . '+' exp
   30    | exp . '-' exp
   31    | exp . '*' exp
   32    | exp . '/' exp

    '+'  shift, and go to state 37
    '-'  shift, and go to state 38
    '*'  shift, and go to state 39
    '/'  shift, and go to state 40

    $default  reduce using rule 22 (cond)


state 67

   17 whileLoop: WHILE '(' cond ')' '{' . programSegment '}'

    FUNCTION     shift, and go to state 1
    VARIABLE     shift, and go to state 2
    NUMBER       shift, and go to state 3
    FOR          shift, and go to state 4
    IF           shift, and go to state 5
    VAR          shift, and go to state 6
    LOGICAL_EXP  shift, and go to state 7
    WHILE        shift, and go to state 8
    '('          shift, and go to state 9

    programSegment  go to state 72
    ifCond          go to state 11
    forLoop         go to state 12
    whileLoop       go to state 13
    functionDecl    go to state 14
    decl            go to state 15
    assign          go to state 16
    exp             go to state 17


state 68

   19 headerDecl: VARIABLE ',' headerDecl .

    $default  reduce using rule 19 (headerDecl)


state 69

   18 functionDecl: FUNCTION VARIABLE '(' headerDecl ')' '{' . programSegment '}'

    FUNCTION     shift, and go to state 1
    VARIABLE     shift, and go to state 2
    NUMBER       shift, and go to state 3
    FOR          shift, and go to state 4
    IF           shift, and go to state 5
    VAR          shift, and go to state 6
    LOGICAL_EXP  shift, and go to state 7
    WHILE        shift, and go to state 8
    '('          shift, and go to state 9

    programSegment  go to state 73
    ifCond          go to state 11
    forLoop         go to state 12
    whileLoop       go to state 13
    functionDecl    go to state 14
    decl            go to state 15
    assign          go to state 16
    exp             go to state 17


state 70

   16 forLoop: FOR '(' exp '=' exp ';' . cond ';' VARIABLE PRE_POST_FIX_OP ')' '{' programSegment '}'

    VARIABLE     shift, and go to state 25
    NUMBER       shift, and go to state 3
    LOGICAL_EXP  shift, and go to state 7
    '('          shift, and go to state 9

    cond  go to state 74
    exp   go to state 46


state 71

    8 programSegment: programSegment . decl ';'
    9               | programSegment . exp ';'
   10               | programSegment . ifCond
   11               | programSegment . forLoop
   12               | programSegment . whileLoop
   13               | programSegment . assign ';'
   14               | programSegment . functionDecl
   15 ifCond: IF '(' cond ')' '{' programSegment . '}'

    FUNCTION     shift, and go to state 1
    VARIABLE     shift, and go to state 2
    NUMBER       shift, and go to state 3
    FOR          shift, and go to state 4
    IF           shift, and go to state 5
    VAR          shift, and go to state 6
    LOGICAL_EXP  shift, and go to state 7
    WHILE        shift, and go to state 8
    '('          shift, and go to state 9
    '}'          shift, and go to state 75

    ifCond        go to state 28
    forLoop       go to state 29
    whileLoop     go to state 30
    functionDecl  go to state 31
    decl          go to state 32
    assign        go to state 33
    exp           go to state 34


state 72

    8 programSegment: programSegment . decl ';'
    9               | programSegment . exp ';'
   10               | programSegment . ifCond
   11               | programSegment . forLoop
   12               | programSegment . whileLoop
   13               | programSegment . assign ';'
   14               | programSegment . functionDecl
   17 whileLoop: WHILE '(' cond ')' '{' programSegment . '}'

    FUNCTION     shift, and go to state 1
    VARIABLE     shift, and go to state 2
    NUMBER       shift, and go to state 3
    FOR          shift, and go to state 4
    IF           shift, and go to state 5
    VAR          shift, and go to state 6
    LOGICAL_EXP  shift, and go to state 7
    WHILE        shift, and go to state 8
    '('          shift, and go to state 9
    '}'          shift, and go to state 76

    ifCond        go to state 28
    forLoop       go to state 29
    whileLoop     go to state 30
    functionDecl  go to state 31
    decl          go to state 32
    assign        go to state 33
    exp           go to state 34


state 73

    8 programSegment: programSegment . decl ';'
    9               | programSegment . exp ';'
   10               | programSegment . ifCond
   11               | programSegment . forLoop
   12               | programSegment . whileLoop
   13               | programSegment . assign ';'
   14               | programSegment . functionDecl
   18 functionDecl: FUNCTION VARIABLE '(' headerDecl ')' '{' programSegment . '}'

    FUNCTION     shift, and go to state 1
    VARIABLE     shift, and go to state 2
    NUMBER       shift, and go to state 3
    FOR          shift, and go to state 4
    IF           shift, and go to state 5
    VAR          shift, and go to state 6
    LOGICAL_EXP  shift, and go to state 7
    WHILE        shift, and go to state 8
    '('          shift, and go to state 9
    '}'          shift, and go to state 77

    ifCond        go to state 28
    forLoop       go to state 29
    whileLoop     go to state 30
    functionDecl  go to state 31
    decl          go to state 32
    assign        go to state 33
    exp           go to state 34


state 74

   16 forLoop: FOR '(' exp '=' exp ';' cond . ';' VARIABLE PRE_POST_FIX_OP ')' '{' programSegment '}'

    ';'  shift, and go to state 78


state 75

   15 ifCond: IF '(' cond ')' '{' programSegment '}' .

    $default  reduce using rule 15 (ifCond)


state 76

   17 whileLoop: WHILE '(' cond ')' '{' programSegment '}' .

    $default  reduce using rule 17 (whileLoop)


state 77

   18 functionDecl: FUNCTION VARIABLE '(' headerDecl ')' '{' programSegment '}' .

    $default  reduce using rule 18 (functionDecl)


state 78

   16 forLoop: FOR '(' exp '=' exp ';' cond ';' . VARIABLE PRE_POST_FIX_OP ')' '{' programSegment '}'

    VARIABLE  shift, and go to state 79


state 79

   16 forLoop: FOR '(' exp '=' exp ';' cond ';' VARIABLE . PRE_POST_FIX_OP ')' '{' programSegment '}'

    PRE_POST_FIX_OP  shift, and go to state 80


state 80

   16 forLoop: FOR '(' exp '=' exp ';' cond ';' VARIABLE PRE_POST_FIX_OP . ')' '{' programSegment '}'

    ')'  shift, and go to state 81


state 81

   16 forLoop: FOR '(' exp '=' exp ';' cond ';' VARIABLE PRE_POST_FIX_OP ')' . '{' programSegment '}'

    '{'  shift, and go to state 82


state 82

   16 forLoop: FOR '(' exp '=' exp ';' cond ';' VARIABLE PRE_POST_FIX_OP ')' '{' . programSegment '}'

    FUNCTION     shift, and go to state 1
    VARIABLE     shift, and go to state 2
    NUMBER       shift, and go to state 3
    FOR          shift, and go to state 4
    IF           shift, and go to state 5
    VAR          shift, and go to state 6
    LOGICAL_EXP  shift, and go to state 7
    WHILE        shift, and go to state 8
    '('          shift, and go to state 9

    programSegment  go to state 83
    ifCond          go to state 11
    forLoop         go to state 12
    whileLoop       go to state 13
    functionDecl    go to state 14
    decl            go to state 15
    assign          go to state 16
    exp             go to state 17


state 83

    8 programSegment: programSegment . decl ';'
    9               | programSegment . exp ';'
   10               | programSegment . ifCond
   11               | programSegment . forLoop
   12               | programSegment . whileLoop
   13               | programSegment . assign ';'
   14               | programSegment . functionDecl
   16 forLoop: FOR '(' exp '=' exp ';' cond ';' VARIABLE PRE_POST_FIX_OP ')' '{' programSegment . '}'

    FUNCTION     shift, and go to state 1
    VARIABLE     shift, and go to state 2
    NUMBER       shift, and go to state 3
    FOR          shift, and go to state 4
    IF           shift, and go to state 5
    VAR          shift, and go to state 6
    LOGICAL_EXP  shift, and go to state 7
    WHILE        shift, and go to state 8
    '('          shift, and go to state 9
    '}'          shift, and go to state 84

    ifCond        go to state 28
    forLoop       go to state 29
    whileLoop     go to state 30
    functionDecl  go to state 31
    decl          go to state 32
    assign        go to state 33
    exp           go to state 34


state 84

   16 forLoop: FOR '(' exp '=' exp ';' cond ';' VARIABLE PRE_POST_FIX_OP ')' '{' programSegment '}' .

    $default  reduce using rule 16 (forLoop)
