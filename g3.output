Grammar

    0 $accept: programSegment $end

    1 programSegment: decl ';'
    2               | exp ';'
    3               | cond
    4               | forLoop
    5               | whileLoop
    6               | programSegment decl ';'
    7               | programSegment exp ';'
    8               | programSegment cond
    9               | programSegment forLoop
   10               | programSegment whileLoop

   11 cond: IF '(' exp COND_OP exp ')' '{' programSegment '}'
   12     | IF '(' exp ')' '{' programSegment '}'

   13 forLoop: FOR '(' exp COND_OP exp ')' '{' programSegment '}'

   14 whileLoop: WHILE '(' exp COND_OP exp ')' '{' programSegment '}'
   15          | WHILE '(' exp ')' '{' programSegment '}'

   16 decl: VAR VARIABLE

   17 exp: LOGICAL_EXP
   18    | NUMBER
   19    | VARIABLE
   20    | exp '+' exp
   21    | exp '-' exp
   22    | exp '*' exp
   23    | exp '/' exp
   24    | '(' exp ')'


Terminals, with rules where they appear

$end (0) 0
'(' (40) 11 12 13 14 15 24
')' (41) 11 12 13 14 15 24
'*' (42) 22
'+' (43) 20
'-' (45) 21
'/' (47) 23
';' (59) 1 2 6 7
'{' (123) 11 12 13 14 15
'}' (125) 11 12 13 14 15
error (256)
VARIABLE (258) 16 19
NUMBER (259) 18
FOR (260) 13
IF (261) 11 12
VAR (262) 16
LOGICAL_EXP (263) 17
COND_OP (264) 11 13 14
WHILE (265) 14 15


Nonterminals, with rules where they appear

$accept (20)
    on left: 0
programSegment (21)
    on left: 1 2 3 4 5 6 7 8 9 10, on right: 0 6 7 8 9 10 11 12 13
    14 15
cond (22)
    on left: 11 12, on right: 3 8
forLoop (23)
    on left: 13, on right: 4 9
whileLoop (24)
    on left: 14 15, on right: 5 10
decl (25)
    on left: 16, on right: 1 6
exp (26)
    on left: 17 18 19 20 21 22 23 24, on right: 2 7 11 12 13 14 15
    20 21 22 23 24


state 0

    0 $accept: . programSegment $end

    VARIABLE     shift, and go to state 1
    NUMBER       shift, and go to state 2
    FOR          shift, and go to state 3
    IF           shift, and go to state 4
    VAR          shift, and go to state 5
    LOGICAL_EXP  shift, and go to state 6
    WHILE        shift, and go to state 7
    '('          shift, and go to state 8

    programSegment  go to state 9
    cond            go to state 10
    forLoop         go to state 11
    whileLoop       go to state 12
    decl            go to state 13
    exp             go to state 14


state 1

   19 exp: VARIABLE .

    $default  reduce using rule 19 (exp)


state 2

   18 exp: NUMBER .

    $default  reduce using rule 18 (exp)


state 3

   13 forLoop: FOR . '(' exp COND_OP exp ')' '{' programSegment '}'

    '('  shift, and go to state 15


state 4

   11 cond: IF . '(' exp COND_OP exp ')' '{' programSegment '}'
   12     | IF . '(' exp ')' '{' programSegment '}'

    '('  shift, and go to state 16


state 5

   16 decl: VAR . VARIABLE

    VARIABLE  shift, and go to state 17


state 6

   17 exp: LOGICAL_EXP .

    $default  reduce using rule 17 (exp)


state 7

   14 whileLoop: WHILE . '(' exp COND_OP exp ')' '{' programSegment '}'
   15          | WHILE . '(' exp ')' '{' programSegment '}'

    '('  shift, and go to state 18


state 8

   24 exp: '(' . exp ')'

    VARIABLE     shift, and go to state 1
    NUMBER       shift, and go to state 2
    LOGICAL_EXP  shift, and go to state 6
    '('          shift, and go to state 8

    exp  go to state 19


state 9

    0 $accept: programSegment . $end
    6 programSegment: programSegment . decl ';'
    7               | programSegment . exp ';'
    8               | programSegment . cond
    9               | programSegment . forLoop
   10               | programSegment . whileLoop

    $end         shift, and go to state 20
    VARIABLE     shift, and go to state 1
    NUMBER       shift, and go to state 2
    FOR          shift, and go to state 3
    IF           shift, and go to state 4
    VAR          shift, and go to state 5
    LOGICAL_EXP  shift, and go to state 6
    WHILE        shift, and go to state 7
    '('          shift, and go to state 8

    cond       go to state 21
    forLoop    go to state 22
    whileLoop  go to state 23
    decl       go to state 24
    exp        go to state 25


state 10

    3 programSegment: cond .

    $default  reduce using rule 3 (programSegment)


state 11

    4 programSegment: forLoop .

    $default  reduce using rule 4 (programSegment)


state 12

    5 programSegment: whileLoop .

    $default  reduce using rule 5 (programSegment)


state 13

    1 programSegment: decl . ';'

    ';'  shift, and go to state 26


state 14

    2 programSegment: exp . ';'
   20 exp: exp . '+' exp
   21    | exp . '-' exp
   22    | exp . '*' exp
   23    | exp . '/' exp

    '+'  shift, and go to state 27
    '-'  shift, and go to state 28
    '*'  shift, and go to state 29
    '/'  shift, and go to state 30
    ';'  shift, and go to state 31


state 15

   13 forLoop: FOR '(' . exp COND_OP exp ')' '{' programSegment '}'

    VARIABLE     shift, and go to state 1
    NUMBER       shift, and go to state 2
    LOGICAL_EXP  shift, and go to state 6
    '('          shift, and go to state 8

    exp  go to state 32


state 16

   11 cond: IF '(' . exp COND_OP exp ')' '{' programSegment '}'
   12     | IF '(' . exp ')' '{' programSegment '}'

    VARIABLE     shift, and go to state 1
    NUMBER       shift, and go to state 2
    LOGICAL_EXP  shift, and go to state 6
    '('          shift, and go to state 8

    exp  go to state 33


state 17

   16 decl: VAR VARIABLE .

    $default  reduce using rule 16 (decl)


state 18

   14 whileLoop: WHILE '(' . exp COND_OP exp ')' '{' programSegment '}'
   15          | WHILE '(' . exp ')' '{' programSegment '}'

    VARIABLE     shift, and go to state 1
    NUMBER       shift, and go to state 2
    LOGICAL_EXP  shift, and go to state 6
    '('          shift, and go to state 8

    exp  go to state 34


state 19

   20 exp: exp . '+' exp
   21    | exp . '-' exp
   22    | exp . '*' exp
   23    | exp . '/' exp
   24    | '(' exp . ')'

    '+'  shift, and go to state 27
    '-'  shift, and go to state 28
    '*'  shift, and go to state 29
    '/'  shift, and go to state 30
    ')'  shift, and go to state 35


state 20

    0 $accept: programSegment $end .

    $default  accept


state 21

    8 programSegment: programSegment cond .

    $default  reduce using rule 8 (programSegment)


state 22

    9 programSegment: programSegment forLoop .

    $default  reduce using rule 9 (programSegment)


state 23

   10 programSegment: programSegment whileLoop .

    $default  reduce using rule 10 (programSegment)


state 24

    6 programSegment: programSegment decl . ';'

    ';'  shift, and go to state 36


state 25

    7 programSegment: programSegment exp . ';'
   20 exp: exp . '+' exp
   21    | exp . '-' exp
   22    | exp . '*' exp
   23    | exp . '/' exp

    '+'  shift, and go to state 27
    '-'  shift, and go to state 28
    '*'  shift, and go to state 29
    '/'  shift, and go to state 30
    ';'  shift, and go to state 37


state 26

    1 programSegment: decl ';' .

    $default  reduce using rule 1 (programSegment)


state 27

   20 exp: exp '+' . exp

    VARIABLE     shift, and go to state 1
    NUMBER       shift, and go to state 2
    LOGICAL_EXP  shift, and go to state 6
    '('          shift, and go to state 8

    exp  go to state 38


state 28

   21 exp: exp '-' . exp

    VARIABLE     shift, and go to state 1
    NUMBER       shift, and go to state 2
    LOGICAL_EXP  shift, and go to state 6
    '('          shift, and go to state 8

    exp  go to state 39


state 29

   22 exp: exp '*' . exp

    VARIABLE     shift, and go to state 1
    NUMBER       shift, and go to state 2
    LOGICAL_EXP  shift, and go to state 6
    '('          shift, and go to state 8

    exp  go to state 40


state 30

   23 exp: exp '/' . exp

    VARIABLE     shift, and go to state 1
    NUMBER       shift, and go to state 2
    LOGICAL_EXP  shift, and go to state 6
    '('          shift, and go to state 8

    exp  go to state 41


state 31

    2 programSegment: exp ';' .

    $default  reduce using rule 2 (programSegment)


state 32

   13 forLoop: FOR '(' exp . COND_OP exp ')' '{' programSegment '}'
   20 exp: exp . '+' exp
   21    | exp . '-' exp
   22    | exp . '*' exp
   23    | exp . '/' exp

    COND_OP  shift, and go to state 42
    '+'      shift, and go to state 27
    '-'      shift, and go to state 28
    '*'      shift, and go to state 29
    '/'      shift, and go to state 30


state 33

   11 cond: IF '(' exp . COND_OP exp ')' '{' programSegment '}'
   12     | IF '(' exp . ')' '{' programSegment '}'
   20 exp: exp . '+' exp
   21    | exp . '-' exp
   22    | exp . '*' exp
   23    | exp . '/' exp

    COND_OP  shift, and go to state 43
    '+'      shift, and go to state 27
    '-'      shift, and go to state 28
    '*'      shift, and go to state 29
    '/'      shift, and go to state 30
    ')'      shift, and go to state 44


state 34

   14 whileLoop: WHILE '(' exp . COND_OP exp ')' '{' programSegment '}'
   15          | WHILE '(' exp . ')' '{' programSegment '}'
   20 exp: exp . '+' exp
   21    | exp . '-' exp
   22    | exp . '*' exp
   23    | exp . '/' exp

    COND_OP  shift, and go to state 45
    '+'      shift, and go to state 27
    '-'      shift, and go to state 28
    '*'      shift, and go to state 29
    '/'      shift, and go to state 30
    ')'      shift, and go to state 46


state 35

   24 exp: '(' exp ')' .

    $default  reduce using rule 24 (exp)


state 36

    6 programSegment: programSegment decl ';' .

    $default  reduce using rule 6 (programSegment)


state 37

    7 programSegment: programSegment exp ';' .

    $default  reduce using rule 7 (programSegment)


state 38

   20 exp: exp . '+' exp
   20    | exp '+' exp .
   21    | exp . '-' exp
   22    | exp . '*' exp
   23    | exp . '/' exp

    '*'  shift, and go to state 29
    '/'  shift, and go to state 30

    $default  reduce using rule 20 (exp)


state 39

   20 exp: exp . '+' exp
   21    | exp . '-' exp
   21    | exp '-' exp .
   22    | exp . '*' exp
   23    | exp . '/' exp

    '*'  shift, and go to state 29
    '/'  shift, and go to state 30

    $default  reduce using rule 21 (exp)


state 40

   20 exp: exp . '+' exp
   21    | exp . '-' exp
   22    | exp . '*' exp
   22    | exp '*' exp .
   23    | exp . '/' exp

    $default  reduce using rule 22 (exp)


state 41

   20 exp: exp . '+' exp
   21    | exp . '-' exp
   22    | exp . '*' exp
   23    | exp . '/' exp
   23    | exp '/' exp .

    $default  reduce using rule 23 (exp)


state 42

   13 forLoop: FOR '(' exp COND_OP . exp ')' '{' programSegment '}'

    VARIABLE     shift, and go to state 1
    NUMBER       shift, and go to state 2
    LOGICAL_EXP  shift, and go to state 6
    '('          shift, and go to state 8

    exp  go to state 47


state 43

   11 cond: IF '(' exp COND_OP . exp ')' '{' programSegment '}'

    VARIABLE     shift, and go to state 1
    NUMBER       shift, and go to state 2
    LOGICAL_EXP  shift, and go to state 6
    '('          shift, and go to state 8

    exp  go to state 48


state 44

   12 cond: IF '(' exp ')' . '{' programSegment '}'

    '{'  shift, and go to state 49


state 45

   14 whileLoop: WHILE '(' exp COND_OP . exp ')' '{' programSegment '}'

    VARIABLE     shift, and go to state 1
    NUMBER       shift, and go to state 2
    LOGICAL_EXP  shift, and go to state 6
    '('          shift, and go to state 8

    exp  go to state 50


state 46

   15 whileLoop: WHILE '(' exp ')' . '{' programSegment '}'

    '{'  shift, and go to state 51


state 47

   13 forLoop: FOR '(' exp COND_OP exp . ')' '{' programSegment '}'
   20 exp: exp . '+' exp
   21    | exp . '-' exp
   22    | exp . '*' exp
   23    | exp . '/' exp

    '+'  shift, and go to state 27
    '-'  shift, and go to state 28
    '*'  shift, and go to state 29
    '/'  shift, and go to state 30
    ')'  shift, and go to state 52


state 48

   11 cond: IF '(' exp COND_OP exp . ')' '{' programSegment '}'
   20 exp: exp . '+' exp
   21    | exp . '-' exp
   22    | exp . '*' exp
   23    | exp . '/' exp

    '+'  shift, and go to state 27
    '-'  shift, and go to state 28
    '*'  shift, and go to state 29
    '/'  shift, and go to state 30
    ')'  shift, and go to state 53


state 49

   12 cond: IF '(' exp ')' '{' . programSegment '}'

    VARIABLE     shift, and go to state 1
    NUMBER       shift, and go to state 2
    FOR          shift, and go to state 3
    IF           shift, and go to state 4
    VAR          shift, and go to state 5
    LOGICAL_EXP  shift, and go to state 6
    WHILE        shift, and go to state 7
    '('          shift, and go to state 8

    programSegment  go to state 54
    cond            go to state 10
    forLoop         go to state 11
    whileLoop       go to state 12
    decl            go to state 13
    exp             go to state 14


state 50

   14 whileLoop: WHILE '(' exp COND_OP exp . ')' '{' programSegment '}'
   20 exp: exp . '+' exp
   21    | exp . '-' exp
   22    | exp . '*' exp
   23    | exp . '/' exp

    '+'  shift, and go to state 27
    '-'  shift, and go to state 28
    '*'  shift, and go to state 29
    '/'  shift, and go to state 30
    ')'  shift, and go to state 55


state 51

   15 whileLoop: WHILE '(' exp ')' '{' . programSegment '}'

    VARIABLE     shift, and go to state 1
    NUMBER       shift, and go to state 2
    FOR          shift, and go to state 3
    IF           shift, and go to state 4
    VAR          shift, and go to state 5
    LOGICAL_EXP  shift, and go to state 6
    WHILE        shift, and go to state 7
    '('          shift, and go to state 8

    programSegment  go to state 56
    cond            go to state 10
    forLoop         go to state 11
    whileLoop       go to state 12
    decl            go to state 13
    exp             go to state 14


state 52

   13 forLoop: FOR '(' exp COND_OP exp ')' . '{' programSegment '}'

    '{'  shift, and go to state 57


state 53

   11 cond: IF '(' exp COND_OP exp ')' . '{' programSegment '}'

    '{'  shift, and go to state 58


state 54

    6 programSegment: programSegment . decl ';'
    7               | programSegment . exp ';'
    8               | programSegment . cond
    9               | programSegment . forLoop
   10               | programSegment . whileLoop
   12 cond: IF '(' exp ')' '{' programSegment . '}'

    VARIABLE     shift, and go to state 1
    NUMBER       shift, and go to state 2
    FOR          shift, and go to state 3
    IF           shift, and go to state 4
    VAR          shift, and go to state 5
    LOGICAL_EXP  shift, and go to state 6
    WHILE        shift, and go to state 7
    '('          shift, and go to state 8
    '}'          shift, and go to state 59

    cond       go to state 21
    forLoop    go to state 22
    whileLoop  go to state 23
    decl       go to state 24
    exp        go to state 25


state 55

   14 whileLoop: WHILE '(' exp COND_OP exp ')' . '{' programSegment '}'

    '{'  shift, and go to state 60


state 56

    6 programSegment: programSegment . decl ';'
    7               | programSegment . exp ';'
    8               | programSegment . cond
    9               | programSegment . forLoop
   10               | programSegment . whileLoop
   15 whileLoop: WHILE '(' exp ')' '{' programSegment . '}'

    VARIABLE     shift, and go to state 1
    NUMBER       shift, and go to state 2
    FOR          shift, and go to state 3
    IF           shift, and go to state 4
    VAR          shift, and go to state 5
    LOGICAL_EXP  shift, and go to state 6
    WHILE        shift, and go to state 7
    '('          shift, and go to state 8
    '}'          shift, and go to state 61

    cond       go to state 21
    forLoop    go to state 22
    whileLoop  go to state 23
    decl       go to state 24
    exp        go to state 25


state 57

   13 forLoop: FOR '(' exp COND_OP exp ')' '{' . programSegment '}'

    VARIABLE     shift, and go to state 1
    NUMBER       shift, and go to state 2
    FOR          shift, and go to state 3
    IF           shift, and go to state 4
    VAR          shift, and go to state 5
    LOGICAL_EXP  shift, and go to state 6
    WHILE        shift, and go to state 7
    '('          shift, and go to state 8

    programSegment  go to state 62
    cond            go to state 10
    forLoop         go to state 11
    whileLoop       go to state 12
    decl            go to state 13
    exp             go to state 14


state 58

   11 cond: IF '(' exp COND_OP exp ')' '{' . programSegment '}'

    VARIABLE     shift, and go to state 1
    NUMBER       shift, and go to state 2
    FOR          shift, and go to state 3
    IF           shift, and go to state 4
    VAR          shift, and go to state 5
    LOGICAL_EXP  shift, and go to state 6
    WHILE        shift, and go to state 7
    '('          shift, and go to state 8

    programSegment  go to state 63
    cond            go to state 10
    forLoop         go to state 11
    whileLoop       go to state 12
    decl            go to state 13
    exp             go to state 14


state 59

   12 cond: IF '(' exp ')' '{' programSegment '}' .

    $default  reduce using rule 12 (cond)


state 60

   14 whileLoop: WHILE '(' exp COND_OP exp ')' '{' . programSegment '}'

    VARIABLE     shift, and go to state 1
    NUMBER       shift, and go to state 2
    FOR          shift, and go to state 3
    IF           shift, and go to state 4
    VAR          shift, and go to state 5
    LOGICAL_EXP  shift, and go to state 6
    WHILE        shift, and go to state 7
    '('          shift, and go to state 8

    programSegment  go to state 64
    cond            go to state 10
    forLoop         go to state 11
    whileLoop       go to state 12
    decl            go to state 13
    exp             go to state 14


state 61

   15 whileLoop: WHILE '(' exp ')' '{' programSegment '}' .

    $default  reduce using rule 15 (whileLoop)


state 62

    6 programSegment: programSegment . decl ';'
    7               | programSegment . exp ';'
    8               | programSegment . cond
    9               | programSegment . forLoop
   10               | programSegment . whileLoop
   13 forLoop: FOR '(' exp COND_OP exp ')' '{' programSegment . '}'

    VARIABLE     shift, and go to state 1
    NUMBER       shift, and go to state 2
    FOR          shift, and go to state 3
    IF           shift, and go to state 4
    VAR          shift, and go to state 5
    LOGICAL_EXP  shift, and go to state 6
    WHILE        shift, and go to state 7
    '('          shift, and go to state 8
    '}'          shift, and go to state 65

    cond       go to state 21
    forLoop    go to state 22
    whileLoop  go to state 23
    decl       go to state 24
    exp        go to state 25


state 63

    6 programSegment: programSegment . decl ';'
    7               | programSegment . exp ';'
    8               | programSegment . cond
    9               | programSegment . forLoop
   10               | programSegment . whileLoop
   11 cond: IF '(' exp COND_OP exp ')' '{' programSegment . '}'

    VARIABLE     shift, and go to state 1
    NUMBER       shift, and go to state 2
    FOR          shift, and go to state 3
    IF           shift, and go to state 4
    VAR          shift, and go to state 5
    LOGICAL_EXP  shift, and go to state 6
    WHILE        shift, and go to state 7
    '('          shift, and go to state 8
    '}'          shift, and go to state 66

    cond       go to state 21
    forLoop    go to state 22
    whileLoop  go to state 23
    decl       go to state 24
    exp        go to state 25


state 64

    6 programSegment: programSegment . decl ';'
    7               | programSegment . exp ';'
    8               | programSegment . cond
    9               | programSegment . forLoop
   10               | programSegment . whileLoop
   14 whileLoop: WHILE '(' exp COND_OP exp ')' '{' programSegment . '}'

    VARIABLE     shift, and go to state 1
    NUMBER       shift, and go to state 2
    FOR          shift, and go to state 3
    IF           shift, and go to state 4
    VAR          shift, and go to state 5
    LOGICAL_EXP  shift, and go to state 6
    WHILE        shift, and go to state 7
    '('          shift, and go to state 8
    '}'          shift, and go to state 67

    cond       go to state 21
    forLoop    go to state 22
    whileLoop  go to state 23
    decl       go to state 24
    exp        go to state 25


state 65

   13 forLoop: FOR '(' exp COND_OP exp ')' '{' programSegment '}' .

    $default  reduce using rule 13 (forLoop)


state 66

   11 cond: IF '(' exp COND_OP exp ')' '{' programSegment '}' .

    $default  reduce using rule 11 (cond)


state 67

   14 whileLoop: WHILE '(' exp COND_OP exp ')' '{' programSegment '}' .

    $default  reduce using rule 14 (whileLoop)
